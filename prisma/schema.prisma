// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


model SatelliteServices {
  id             Int              @id @default(autoincrement())
  name           String           @unique
  createdAt      DateTime                  @default(now())
  devices        Devices[]
  sendSpecific       SatelliteSendedSpecificAttributes[]
  emittedSpecific SatelliteEmittedSpecificAttributes[]
}

model Devices {
  id               Int                       @id @default(autoincrement())
  deviceId         String                    @unique
  createdAt      DateTime                  @default(now())
  status         DeviceStatus @default(ACTIVE)
  satelliteServiceName String
  satelliteService SatelliteServices @relation(fields: [satelliteServiceName], references: [name])
  satelliteSendedMessages SatelliteSendedMessages[]
}

model SatelliteSendedMessages {
  id                     Int                      @id @default(autoincrement())
  payload                String                   @db.MediumText
  status                 MessageStatus            @default(CREATED)
  createdAt              DateTime                 @default(now())
  deviceId               String
  device                 Devices                  @relation(fields: [deviceId], references: [deviceId])
  satelliteSpecificValues SatelliteSendedSpecificValues[]

}

model SatelliteSendedSpecificAttributes {
  id        Int              @id @default(autoincrement())
  attribute      String           
  createdAt      DateTime                  @default(now())
  satelliteServiceName String
  satelliteService SatelliteServices @relation(fields: [satelliteServiceName], references: [name])
  satelliteSpecificValues SatelliteSendedSpecificValues[]


 @@unique([attribute, satelliteServiceName])
}

model SatelliteSendedSpecificValues {
  id          Int                     @id @default(autoincrement())
  value       String 
  createdAt      DateTime                  @default(now())
  sendedMessageId Int
  sendedMessage SatelliteSendedMessages @relation(fields: [sendedMessageId], references: [id])
  sendedMessageAttributeId Int
  sendedAttribute SatelliteSendedSpecificAttributes @relation(fields: [sendedMessageAttributeId], references: [id])
}

model SatelliteEmittedMessages {
  id             Int      @id @default(autoincrement())
  payload        String
  device         String
  size           Int
  satelliteSpecificValues SatelliteEmittedSpecificValues[]
  
}

model SatelliteEmittedSpecificAttributes {
  id             Int      @id @default(autoincrement())
  attribute      String           
  createdAt      DateTime                  @default(now())
  satelliteServiceName String
  satelliteService SatelliteServices @relation(fields: [satelliteServiceName], references: [name])
  satelliteAttributes SatelliteEmittedSpecificValues[]

  @@unique([attribute, satelliteServiceName])

}

model SatelliteEmittedSpecificValues {
  id Int @id @default(autoincrement())
  value       String 
  createdAt      DateTime                  @default(now())
  emittedMessageId Int
  emittedMessage SatelliteEmittedMessages @relation(fields: [emittedMessageId], references: [id])
  emittedMessageAttributeId Int
  emittedAttribute SatelliteEmittedSpecificAttributes @relation(fields: [emittedMessageAttributeId], references: [id])

}

model OrbcommDownloadParamControl {
  id              Int      @id @default(autoincrement())
  previousMessage String
  nextMessage     String
  createdAt       DateTime @default(now())
}

model OrbcommMobileVersion {
  id       Int    @id @default(autoincrement())
  deviceId String @unique
  name     String
  SIN      Int
  MIN      Int
  fields   Json
}

model OrbcommLogError {
  id          Int      @id @default(autoincrement())
  service String
  description String   @db.MediumText
  createdAt   DateTime @default(now())
}

enum MessageStatus {
  CREATED
  SUBMITTED
  SENDED
  TIMEOUT
  FAILED
  CANCELLED
}

enum DeviceStatus {
  ACTIVE
  DISABLED
}

